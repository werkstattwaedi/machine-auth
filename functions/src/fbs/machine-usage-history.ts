// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MachineUsage, MachineUsageT } from '../fbs/machine-usage.js';


export class MachineUsageHistory implements flatbuffers.IUnpackableObject<MachineUsageHistoryT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MachineUsageHistory {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMachineUsageHistory(bb:flatbuffers.ByteBuffer, obj?:MachineUsageHistory):MachineUsageHistory {
  return (obj || new MachineUsageHistory()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMachineUsageHistory(bb:flatbuffers.ByteBuffer, obj?:MachineUsageHistory):MachineUsageHistory {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MachineUsageHistory()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

machineId():string|null
machineId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
machineId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

records(index: number, obj?:MachineUsage):MachineUsage|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new MachineUsage()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

recordsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMachineUsageHistory(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMachineId(builder:flatbuffers.Builder, machineIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, machineIdOffset, 0);
}

static addRecords(builder:flatbuffers.Builder, recordsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, recordsOffset, 0);
}

static createRecordsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRecordsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMachineUsageHistory(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMachineUsageHistoryBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedMachineUsageHistoryBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createMachineUsageHistory(builder:flatbuffers.Builder, machineIdOffset:flatbuffers.Offset, recordsOffset:flatbuffers.Offset):flatbuffers.Offset {
  MachineUsageHistory.startMachineUsageHistory(builder);
  MachineUsageHistory.addMachineId(builder, machineIdOffset);
  MachineUsageHistory.addRecords(builder, recordsOffset);
  return MachineUsageHistory.endMachineUsageHistory(builder);
}

unpack(): MachineUsageHistoryT {
  return new MachineUsageHistoryT(
    this.machineId(),
    this.bb!.createObjList<MachineUsage, MachineUsageT>(this.records.bind(this), this.recordsLength())
  );
}


unpackTo(_o: MachineUsageHistoryT): void {
  _o.machineId = this.machineId();
  _o.records = this.bb!.createObjList<MachineUsage, MachineUsageT>(this.records.bind(this), this.recordsLength());
}
}

export class MachineUsageHistoryT implements flatbuffers.IGeneratedObject {
constructor(
  public machineId: string|Uint8Array|null = null,
  public records: (MachineUsageT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const machineId = (this.machineId !== null ? builder.createString(this.machineId!) : 0);
  const records = MachineUsageHistory.createRecordsVector(builder, builder.createObjectOffsetList(this.records));

  return MachineUsageHistory.createMachineUsageHistory(builder,
    machineId,
    records
  );
}
}

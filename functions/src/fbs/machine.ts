// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MachineControl, unionToMachineControl, unionListToMachineControl } from '../fbs/machine-control';
import { MachineControlRelais, MachineControlRelaisT } from '../fbs/machine-control-relais';


export class Machine implements flatbuffers.IUnpackableObject<MachineT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Machine {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMachine(bb:flatbuffers.ByteBuffer, obj?:Machine):Machine {
  return (obj || new Machine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMachine(bb:flatbuffers.ByteBuffer, obj?:Machine):Machine {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Machine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

label():string|null
label(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
label(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

requiredPermissions(index: number):string
requiredPermissions(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
requiredPermissions(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

requiredPermissionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

controlType():MachineControl {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MachineControl.NONE;
}

control<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startMachine(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addLabel(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, labelOffset, 0);
}

static addRequiredPermissions(builder:flatbuffers.Builder, requiredPermissionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, requiredPermissionsOffset, 0);
}

static createRequiredPermissionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRequiredPermissionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addControlType(builder:flatbuffers.Builder, controlType:MachineControl) {
  builder.addFieldInt8(3, controlType, MachineControl.NONE);
}

static addControl(builder:flatbuffers.Builder, controlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, controlOffset, 0);
}

static endMachine(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMachine(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, labelOffset:flatbuffers.Offset, requiredPermissionsOffset:flatbuffers.Offset, controlType:MachineControl, controlOffset:flatbuffers.Offset):flatbuffers.Offset {
  Machine.startMachine(builder);
  Machine.addId(builder, idOffset);
  Machine.addLabel(builder, labelOffset);
  Machine.addRequiredPermissions(builder, requiredPermissionsOffset);
  Machine.addControlType(builder, controlType);
  Machine.addControl(builder, controlOffset);
  return Machine.endMachine(builder);
}

unpack(): MachineT {
  return new MachineT(
    this.id(),
    this.label(),
    this.bb!.createScalarList<string>(this.requiredPermissions.bind(this), this.requiredPermissionsLength()),
    this.controlType(),
    (() => {
      const temp = unionToMachineControl(this.controlType(), this.control.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: MachineT): void {
  _o.id = this.id();
  _o.label = this.label();
  _o.requiredPermissions = this.bb!.createScalarList<string>(this.requiredPermissions.bind(this), this.requiredPermissionsLength());
  _o.controlType = this.controlType();
  _o.control = (() => {
      const temp = unionToMachineControl(this.controlType(), this.control.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class MachineT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public label: string|Uint8Array|null = null,
  public requiredPermissions: (string)[] = [],
  public controlType: MachineControl = MachineControl.NONE,
  public control: MachineControlRelaisT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const label = (this.label !== null ? builder.createString(this.label!) : 0);
  const requiredPermissions = Machine.createRequiredPermissionsVector(builder, builder.createObjectOffsetList(this.requiredPermissions));
  const control = builder.createObjectOffset(this.control);

  return Machine.createMachine(builder,
    id,
    label,
    requiredPermissions,
    this.controlType,
    control
  );
}
}

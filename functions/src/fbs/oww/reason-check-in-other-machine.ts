// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class ReasonCheckInOtherMachine implements flatbuffers.IUnpackableObject<ReasonCheckInOtherMachineT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ReasonCheckInOtherMachine {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReasonCheckInOtherMachine(bb:flatbuffers.ByteBuffer, obj?:ReasonCheckInOtherMachine):ReasonCheckInOtherMachine {
  return (obj || new ReasonCheckInOtherMachine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReasonCheckInOtherMachine(bb:flatbuffers.ByteBuffer, obj?:ReasonCheckInOtherMachine):ReasonCheckInOtherMachine {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ReasonCheckInOtherMachine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

machineId():string|null
machineId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
machineId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startReasonCheckInOtherMachine(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMachineId(builder:flatbuffers.Builder, machineIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, machineIdOffset, 0);
}

static endReasonCheckInOtherMachine(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createReasonCheckInOtherMachine(builder:flatbuffers.Builder, machineIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  ReasonCheckInOtherMachine.startReasonCheckInOtherMachine(builder);
  ReasonCheckInOtherMachine.addMachineId(builder, machineIdOffset);
  return ReasonCheckInOtherMachine.endReasonCheckInOtherMachine(builder);
}

unpack(): ReasonCheckInOtherMachineT {
  return new ReasonCheckInOtherMachineT(
    this.machineId()
  );
}


unpackTo(_o: ReasonCheckInOtherMachineT): void {
  _o.machineId = this.machineId();
}
}

export class ReasonCheckInOtherMachineT implements flatbuffers.IGeneratedObject {
constructor(
  public machineId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const machineId = (this.machineId !== null ? builder.createString(this.machineId!) : 0);

  return ReasonCheckInOtherMachine.createReasonCheckInOtherMachine(builder,
    machineId
  );
}
}

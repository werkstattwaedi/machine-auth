// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class UploadUsageResponse implements flatbuffers.IUnpackableObject<UploadUsageResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UploadUsageResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUploadUsageResponse(bb:flatbuffers.ByteBuffer, obj?:UploadUsageResponse):UploadUsageResponse {
  return (obj || new UploadUsageResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUploadUsageResponse(bb:flatbuffers.ByteBuffer, obj?:UploadUsageResponse):UploadUsageResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UploadUsageResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

success():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startUploadUsageResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSuccess(builder:flatbuffers.Builder, success:boolean) {
  builder.addFieldInt8(0, +success, +false);
}

static endUploadUsageResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUploadUsageResponse(builder:flatbuffers.Builder, success:boolean):flatbuffers.Offset {
  UploadUsageResponse.startUploadUsageResponse(builder);
  UploadUsageResponse.addSuccess(builder, success);
  return UploadUsageResponse.endUploadUsageResponse(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):UploadUsageResponse {
  return UploadUsageResponse.getRootAsUploadUsageResponse(new flatbuffers.ByteBuffer(buffer))
}

unpack(): UploadUsageResponseT {
  return new UploadUsageResponseT(
    this.success()
  );
}


unpackTo(_o: UploadUsageResponseT): void {
  _o.success = this.success();
}
}

export class UploadUsageResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public success: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return UploadUsageResponse.createUploadUsageResponse(builder,
    this.success
  );
}
}

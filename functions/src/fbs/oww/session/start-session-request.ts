// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TagUid, TagUidT } from '../../oww/ntag/tag-uid.js';
import { Authentication, unionToAuthentication, unionListToAuthentication } from '../../oww/session/authentication.js';
import { FirstAuthentication, FirstAuthenticationT } from '../../oww/session/first-authentication.js';
import { RecentAuthentication, RecentAuthenticationT } from '../../oww/session/recent-authentication.js';


export class StartSessionRequest implements flatbuffers.IUnpackableObject<StartSessionRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StartSessionRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStartSessionRequest(bb:flatbuffers.ByteBuffer, obj?:StartSessionRequest):StartSessionRequest {
  return (obj || new StartSessionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStartSessionRequest(bb:flatbuffers.ByteBuffer, obj?:StartSessionRequest):StartSessionRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StartSessionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tokenId(obj?:TagUid):TagUid|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TagUid()).__init(this.bb_pos + offset, this.bb!) : null;
}

machineId():string|null
machineId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
machineId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

authenticationType():Authentication {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Authentication.NONE;
}

authentication<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startStartSessionRequest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addTokenId(builder:flatbuffers.Builder, tokenIdOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, tokenIdOffset, 0);
}

static addMachineId(builder:flatbuffers.Builder, machineIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, machineIdOffset, 0);
}

static addAuthenticationType(builder:flatbuffers.Builder, authenticationType:Authentication) {
  builder.addFieldInt8(2, authenticationType, Authentication.NONE);
}

static addAuthentication(builder:flatbuffers.Builder, authenticationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, authenticationOffset, 0);
}

static endStartSessionRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStartSessionRequest(builder:flatbuffers.Builder, tokenIdOffset:flatbuffers.Offset, machineIdOffset:flatbuffers.Offset, authenticationType:Authentication, authenticationOffset:flatbuffers.Offset):flatbuffers.Offset {
  StartSessionRequest.startStartSessionRequest(builder);
  StartSessionRequest.addTokenId(builder, tokenIdOffset);
  StartSessionRequest.addMachineId(builder, machineIdOffset);
  StartSessionRequest.addAuthenticationType(builder, authenticationType);
  StartSessionRequest.addAuthentication(builder, authenticationOffset);
  return StartSessionRequest.endStartSessionRequest(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):StartSessionRequest {
  return StartSessionRequest.getRootAsStartSessionRequest(new flatbuffers.ByteBuffer(buffer))
}

unpack(): StartSessionRequestT {
  return new StartSessionRequestT(
    (this.tokenId() !== null ? this.tokenId()!.unpack() : null),
    this.machineId(),
    this.authenticationType(),
    (() => {
      const temp = unionToAuthentication(this.authenticationType(), this.authentication.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: StartSessionRequestT): void {
  _o.tokenId = (this.tokenId() !== null ? this.tokenId()!.unpack() : null);
  _o.machineId = this.machineId();
  _o.authenticationType = this.authenticationType();
  _o.authentication = (() => {
      const temp = unionToAuthentication(this.authenticationType(), this.authentication.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class StartSessionRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public tokenId: TagUidT|null = null,
  public machineId: string|Uint8Array|null = null,
  public authenticationType: Authentication = Authentication.NONE,
  public authentication: FirstAuthenticationT|RecentAuthenticationT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const machineId = (this.machineId !== null ? builder.createString(this.machineId!) : 0);
  const authentication = builder.createObjectOffset(this.authentication);

  return StartSessionRequest.createStartSessionRequest(builder,
    (this.tokenId !== null ? this.tokenId!.pack(builder) : 0),
    machineId,
    this.authenticationType,
    authentication
  );
}
}

// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class FirstAuthentication implements flatbuffers.IUnpackableObject<FirstAuthenticationT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FirstAuthentication {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFirstAuthentication(bb:flatbuffers.ByteBuffer, obj?:FirstAuthentication):FirstAuthentication {
  return (obj || new FirstAuthentication()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFirstAuthentication(bb:flatbuffers.ByteBuffer, obj?:FirstAuthentication):FirstAuthentication {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FirstAuthentication()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ntagChallenge(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

ntagChallengeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ntagChallengeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startFirstAuthentication(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addNtagChallenge(builder:flatbuffers.Builder, ntagChallengeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ntagChallengeOffset, 0);
}

static createNtagChallengeVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startNtagChallengeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endFirstAuthentication(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFirstAuthentication(builder:flatbuffers.Builder, ntagChallengeOffset:flatbuffers.Offset):flatbuffers.Offset {
  FirstAuthentication.startFirstAuthentication(builder);
  FirstAuthentication.addNtagChallenge(builder, ntagChallengeOffset);
  return FirstAuthentication.endFirstAuthentication(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):FirstAuthentication {
  return FirstAuthentication.getRootAsFirstAuthentication(new flatbuffers.ByteBuffer(buffer))
}

unpack(): FirstAuthenticationT {
  return new FirstAuthenticationT(
    this.bb!.createScalarList<number>(this.ntagChallenge.bind(this), this.ntagChallengeLength())
  );
}


unpackTo(_o: FirstAuthenticationT): void {
  _o.ntagChallenge = this.bb!.createScalarList<number>(this.ntagChallenge.bind(this), this.ntagChallengeLength());
}
}

export class FirstAuthenticationT implements flatbuffers.IGeneratedObject {
constructor(
  public ntagChallenge: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ntagChallenge = FirstAuthentication.createNtagChallengeVector(builder, this.ntagChallenge);

  return FirstAuthentication.createFirstAuthentication(builder,
    ntagChallenge
  );
}
}

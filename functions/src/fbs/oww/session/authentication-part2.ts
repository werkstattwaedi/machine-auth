// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class AuthenticationPart2 implements flatbuffers.IUnpackableObject<AuthenticationPart2T> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AuthenticationPart2 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAuthenticationPart2(bb:flatbuffers.ByteBuffer, obj?:AuthenticationPart2):AuthenticationPart2 {
  return (obj || new AuthenticationPart2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAuthenticationPart2(bb:flatbuffers.ByteBuffer, obj?:AuthenticationPart2):AuthenticationPart2 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AuthenticationPart2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cloudChallenge(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

cloudChallengeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

cloudChallengeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startAuthenticationPart2(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addCloudChallenge(builder:flatbuffers.Builder, cloudChallengeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, cloudChallengeOffset, 0);
}

static createCloudChallengeVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCloudChallengeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endAuthenticationPart2(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAuthenticationPart2(builder:flatbuffers.Builder, cloudChallengeOffset:flatbuffers.Offset):flatbuffers.Offset {
  AuthenticationPart2.startAuthenticationPart2(builder);
  AuthenticationPart2.addCloudChallenge(builder, cloudChallengeOffset);
  return AuthenticationPart2.endAuthenticationPart2(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):AuthenticationPart2 {
  return AuthenticationPart2.getRootAsAuthenticationPart2(new flatbuffers.ByteBuffer(buffer))
}

unpack(): AuthenticationPart2T {
  return new AuthenticationPart2T(
    this.bb!.createScalarList<number>(this.cloudChallenge.bind(this), this.cloudChallengeLength())
  );
}


unpackTo(_o: AuthenticationPart2T): void {
  _o.cloudChallenge = this.bb!.createScalarList<number>(this.cloudChallenge.bind(this), this.cloudChallengeLength());
}
}

export class AuthenticationPart2T implements flatbuffers.IGeneratedObject {
constructor(
  public cloudChallenge: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cloudChallenge = AuthenticationPart2.createCloudChallengeVector(builder, this.cloudChallenge);

  return AuthenticationPart2.createAuthenticationPart2(builder,
    cloudChallenge
  );
}
}

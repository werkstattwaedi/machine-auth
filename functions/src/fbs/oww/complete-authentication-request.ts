// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class CompleteAuthenticationRequest implements flatbuffers.IUnpackableObject<CompleteAuthenticationRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CompleteAuthenticationRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCompleteAuthenticationRequest(bb:flatbuffers.ByteBuffer, obj?:CompleteAuthenticationRequest):CompleteAuthenticationRequest {
  return (obj || new CompleteAuthenticationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCompleteAuthenticationRequest(bb:flatbuffers.ByteBuffer, obj?:CompleteAuthenticationRequest):CompleteAuthenticationRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CompleteAuthenticationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sessionId():string|null
sessionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sessionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

encryptedNtagResponse(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

encryptedNtagResponseLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

encryptedNtagResponseArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startCompleteAuthenticationRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSessionId(builder:flatbuffers.Builder, sessionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sessionIdOffset, 0);
}

static addEncryptedNtagResponse(builder:flatbuffers.Builder, encryptedNtagResponseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, encryptedNtagResponseOffset, 0);
}

static createEncryptedNtagResponseVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startEncryptedNtagResponseVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endCompleteAuthenticationRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCompleteAuthenticationRequest(builder:flatbuffers.Builder, sessionIdOffset:flatbuffers.Offset, encryptedNtagResponseOffset:flatbuffers.Offset):flatbuffers.Offset {
  CompleteAuthenticationRequest.startCompleteAuthenticationRequest(builder);
  CompleteAuthenticationRequest.addSessionId(builder, sessionIdOffset);
  CompleteAuthenticationRequest.addEncryptedNtagResponse(builder, encryptedNtagResponseOffset);
  return CompleteAuthenticationRequest.endCompleteAuthenticationRequest(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):CompleteAuthenticationRequest {
  return CompleteAuthenticationRequest.getRootAsCompleteAuthenticationRequest(new flatbuffers.ByteBuffer(buffer))
}

unpack(): CompleteAuthenticationRequestT {
  return new CompleteAuthenticationRequestT(
    this.sessionId(),
    this.bb!.createScalarList<number>(this.encryptedNtagResponse.bind(this), this.encryptedNtagResponseLength())
  );
}


unpackTo(_o: CompleteAuthenticationRequestT): void {
  _o.sessionId = this.sessionId();
  _o.encryptedNtagResponse = this.bb!.createScalarList<number>(this.encryptedNtagResponse.bind(this), this.encryptedNtagResponseLength());
}
}

export class CompleteAuthenticationRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public sessionId: string|Uint8Array|null = null,
  public encryptedNtagResponse: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sessionId = (this.sessionId !== null ? builder.createString(this.sessionId!) : 0);
  const encryptedNtagResponse = CompleteAuthenticationRequest.createEncryptedNtagResponseVector(builder, this.encryptedNtagResponse);

  return CompleteAuthenticationRequest.createCompleteAuthenticationRequest(builder,
    sessionId,
    encryptedNtagResponse
  );
}
}

// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class TagUid implements flatbuffers.IUnpackableObject<TagUidT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TagUid {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

uid(index: number):number|null {
    return this.bb!.readFloat32(this.bb_pos + 0 + index * 4);
}

static sizeOf():number {
  return 28;
}

static createTagUid(builder:flatbuffers.Builder, uid: number[]|null):flatbuffers.Offset {
  builder.prep(4, 28);

  for (let i = 6; i >= 0; --i) {
    builder.writeFloat32((uid?.[i] ?? 0));

  }

  return builder.offset();
}


unpack(): TagUidT {
  return new TagUidT(
    this.bb!.createScalarList<number>(this.uid.bind(this), 7)
  );
}


unpackTo(_o: TagUidT): void {
  _o.uid = this.bb!.createScalarList<number>(this.uid.bind(this), 7);
}
}

export class TagUidT implements flatbuffers.IGeneratedObject {
constructor(
  public uid: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TagUid.createTagUid(builder,
    this.uid
  );
}
}

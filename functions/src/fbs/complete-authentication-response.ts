// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CompleteAuthenticationResult, unionToCompleteAuthenticationResult, unionListToCompleteAuthenticationResult } from '../fbs/complete-authentication-result.js';
import { Rejected, RejectedT } from '../fbs/rejected.js';
import { TokenSession, TokenSessionT } from '../fbs/token-session.js';


export class CompleteAuthenticationResponse implements flatbuffers.IUnpackableObject<CompleteAuthenticationResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CompleteAuthenticationResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCompleteAuthenticationResponse(bb:flatbuffers.ByteBuffer, obj?:CompleteAuthenticationResponse):CompleteAuthenticationResponse {
  return (obj || new CompleteAuthenticationResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCompleteAuthenticationResponse(bb:flatbuffers.ByteBuffer, obj?:CompleteAuthenticationResponse):CompleteAuthenticationResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CompleteAuthenticationResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

resultType():CompleteAuthenticationResult {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : CompleteAuthenticationResult.NONE;
}

result<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startCompleteAuthenticationResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addResultType(builder:flatbuffers.Builder, resultType:CompleteAuthenticationResult) {
  builder.addFieldInt8(0, resultType, CompleteAuthenticationResult.NONE);
}

static addResult(builder:flatbuffers.Builder, resultOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, resultOffset, 0);
}

static endCompleteAuthenticationResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCompleteAuthenticationResponse(builder:flatbuffers.Builder, resultType:CompleteAuthenticationResult, resultOffset:flatbuffers.Offset):flatbuffers.Offset {
  CompleteAuthenticationResponse.startCompleteAuthenticationResponse(builder);
  CompleteAuthenticationResponse.addResultType(builder, resultType);
  CompleteAuthenticationResponse.addResult(builder, resultOffset);
  return CompleteAuthenticationResponse.endCompleteAuthenticationResponse(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):CompleteAuthenticationResponse {
  return CompleteAuthenticationResponse.getRootAsCompleteAuthenticationResponse(new flatbuffers.ByteBuffer(buffer))
}

unpack(): CompleteAuthenticationResponseT {
  return new CompleteAuthenticationResponseT(
    this.resultType(),
    (() => {
      const temp = unionToCompleteAuthenticationResult(this.resultType(), this.result.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: CompleteAuthenticationResponseT): void {
  _o.resultType = this.resultType();
  _o.result = (() => {
      const temp = unionToCompleteAuthenticationResult(this.resultType(), this.result.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class CompleteAuthenticationResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public resultType: CompleteAuthenticationResult = CompleteAuthenticationResult.NONE,
  public result: RejectedT|TokenSessionT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const result = builder.createObjectOffset(this.result);

  return CompleteAuthenticationResponse.createCompleteAuthenticationResponse(builder,
    this.resultType,
    result
  );
}
}

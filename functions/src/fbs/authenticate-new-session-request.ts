// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TagUid, TagUidT } from '../fbs/tag-uid.js';


export class AuthenticateNewSessionRequest implements flatbuffers.IUnpackableObject<AuthenticateNewSessionRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AuthenticateNewSessionRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAuthenticateNewSessionRequest(bb:flatbuffers.ByteBuffer, obj?:AuthenticateNewSessionRequest):AuthenticateNewSessionRequest {
  return (obj || new AuthenticateNewSessionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAuthenticateNewSessionRequest(bb:flatbuffers.ByteBuffer, obj?:AuthenticateNewSessionRequest):AuthenticateNewSessionRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AuthenticateNewSessionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tokenId(obj?:TagUid):TagUid|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TagUid()).__init(this.bb_pos + offset, this.bb!) : null;
}

ntagChallenge(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

ntagChallengeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ntagChallengeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startAuthenticateNewSessionRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTokenId(builder:flatbuffers.Builder, tokenIdOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, tokenIdOffset, 0);
}

static addNtagChallenge(builder:flatbuffers.Builder, ntagChallengeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ntagChallengeOffset, 0);
}

static createNtagChallengeVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startNtagChallengeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endAuthenticateNewSessionRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAuthenticateNewSessionRequest(builder:flatbuffers.Builder, tokenIdOffset:flatbuffers.Offset, ntagChallengeOffset:flatbuffers.Offset):flatbuffers.Offset {
  AuthenticateNewSessionRequest.startAuthenticateNewSessionRequest(builder);
  AuthenticateNewSessionRequest.addTokenId(builder, tokenIdOffset);
  AuthenticateNewSessionRequest.addNtagChallenge(builder, ntagChallengeOffset);
  return AuthenticateNewSessionRequest.endAuthenticateNewSessionRequest(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):AuthenticateNewSessionRequest {
  return AuthenticateNewSessionRequest.getRootAsAuthenticateNewSessionRequest(new flatbuffers.ByteBuffer(buffer))
}

unpack(): AuthenticateNewSessionRequestT {
  return new AuthenticateNewSessionRequestT(
    (this.tokenId() !== null ? this.tokenId()!.unpack() : null),
    this.bb!.createScalarList<number>(this.ntagChallenge.bind(this), this.ntagChallengeLength())
  );
}


unpackTo(_o: AuthenticateNewSessionRequestT): void {
  _o.tokenId = (this.tokenId() !== null ? this.tokenId()!.unpack() : null);
  _o.ntagChallenge = this.bb!.createScalarList<number>(this.ntagChallenge.bind(this), this.ntagChallengeLength());
}
}

export class AuthenticateNewSessionRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public tokenId: TagUidT|null = null,
  public ntagChallenge: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ntagChallenge = AuthenticateNewSessionRequest.createNtagChallengeVector(builder, this.ntagChallenge);

  return AuthenticateNewSessionRequest.createAuthenticateNewSessionRequest(builder,
    (this.tokenId !== null ? this.tokenId!.pack(builder) : 0),
    ntagChallenge
  );
}
}

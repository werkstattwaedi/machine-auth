// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { HwRevision } from '../fbs/hw-revision.js';
import { Machine, MachineT } from '../fbs/machine.js';


export class DeviceConfig implements flatbuffers.IUnpackableObject<DeviceConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DeviceConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeviceConfig(bb:flatbuffers.ByteBuffer, obj?:DeviceConfig):DeviceConfig {
  return (obj || new DeviceConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeviceConfig(bb:flatbuffers.ByteBuffer, obj?:DeviceConfig):DeviceConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeviceConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

hwRevision():HwRevision {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : HwRevision.Unspecified;
}

machines(index: number, obj?:Machine):Machine|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Machine()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

machinesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDeviceConfig(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addHwRevision(builder:flatbuffers.Builder, hwRevision:HwRevision) {
  builder.addFieldInt8(0, hwRevision, HwRevision.Unspecified);
}

static addMachines(builder:flatbuffers.Builder, machinesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, machinesOffset, 0);
}

static createMachinesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMachinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDeviceConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDeviceConfig(builder:flatbuffers.Builder, hwRevision:HwRevision, machinesOffset:flatbuffers.Offset):flatbuffers.Offset {
  DeviceConfig.startDeviceConfig(builder);
  DeviceConfig.addHwRevision(builder, hwRevision);
  DeviceConfig.addMachines(builder, machinesOffset);
  return DeviceConfig.endDeviceConfig(builder);
}

unpack(): DeviceConfigT {
  return new DeviceConfigT(
    this.hwRevision(),
    this.bb!.createObjList<Machine, MachineT>(this.machines.bind(this), this.machinesLength())
  );
}


unpackTo(_o: DeviceConfigT): void {
  _o.hwRevision = this.hwRevision();
  _o.machines = this.bb!.createObjList<Machine, MachineT>(this.machines.bind(this), this.machinesLength());
}
}

export class DeviceConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public hwRevision: HwRevision = HwRevision.Unspecified,
  public machines: (MachineT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const machines = DeviceConfig.createMachinesVector(builder, builder.createObjectOffsetList(this.machines));

  return DeviceConfig.createDeviceConfig(builder,
    this.hwRevision,
    machines
  );
}
}

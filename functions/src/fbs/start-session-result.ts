// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { AuthRequired, AuthRequiredT } from '../fbs/auth-required';
import { Rejected, RejectedT } from '../fbs/rejected';
import { TokenSession, TokenSessionT } from '../fbs/token-session';


export enum StartSessionResult {
  NONE = 0,
  TokenSession = 1,
  AuthRequired = 2,
  Rejected = 3
}

export function unionToStartSessionResult(
  type: StartSessionResult,
  accessor: (obj:AuthRequired|Rejected|TokenSession) => AuthRequired|Rejected|TokenSession|null
): AuthRequired|Rejected|TokenSession|null {
  switch(StartSessionResult[type]) {
    case 'NONE': return null; 
    case 'TokenSession': return accessor(new TokenSession())! as TokenSession;
    case 'AuthRequired': return accessor(new AuthRequired())! as AuthRequired;
    case 'Rejected': return accessor(new Rejected())! as Rejected;
    default: return null;
  }
}

export function unionListToStartSessionResult(
  type: StartSessionResult, 
  accessor: (index: number, obj:AuthRequired|Rejected|TokenSession) => AuthRequired|Rejected|TokenSession|null, 
  index: number
): AuthRequired|Rejected|TokenSession|null {
  switch(StartSessionResult[type]) {
    case 'NONE': return null; 
    case 'TokenSession': return accessor(index, new TokenSession())! as TokenSession;
    case 'AuthRequired': return accessor(index, new AuthRequired())! as AuthRequired;
    case 'Rejected': return accessor(index, new Rejected())! as Rejected;
    default: return null;
  }
}

// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TagUid, TagUidT } from '../fbs/tag-uid.js';


export class TokenSession implements flatbuffers.IUnpackableObject<TokenSessionT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TokenSession {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTokenSession(bb:flatbuffers.ByteBuffer, obj?:TokenSession):TokenSession {
  return (obj || new TokenSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTokenSession(bb:flatbuffers.ByteBuffer, obj?:TokenSession):TokenSession {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TokenSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tokenId(obj?:TagUid):TagUid|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TagUid()).__init(this.bb_pos + offset, this.bb!) : null;
}

sessionId():string|null
sessionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sessionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

expiration():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

userId():string|null
userId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

userLabel():string|null
userLabel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userLabel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

permissions(index: number):string
permissions(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
permissions(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

permissionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTokenSession(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addTokenId(builder:flatbuffers.Builder, tokenIdOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, tokenIdOffset, 0);
}

static addSessionId(builder:flatbuffers.Builder, sessionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sessionIdOffset, 0);
}

static addExpiration(builder:flatbuffers.Builder, expiration:bigint) {
  builder.addFieldInt64(2, expiration, BigInt('0'));
}

static addUserId(builder:flatbuffers.Builder, userIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, userIdOffset, 0);
}

static addUserLabel(builder:flatbuffers.Builder, userLabelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, userLabelOffset, 0);
}

static addPermissions(builder:flatbuffers.Builder, permissionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, permissionsOffset, 0);
}

static createPermissionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPermissionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTokenSession(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTokenSession(builder:flatbuffers.Builder, tokenIdOffset:flatbuffers.Offset, sessionIdOffset:flatbuffers.Offset, expiration:bigint, userIdOffset:flatbuffers.Offset, userLabelOffset:flatbuffers.Offset, permissionsOffset:flatbuffers.Offset):flatbuffers.Offset {
  TokenSession.startTokenSession(builder);
  TokenSession.addTokenId(builder, tokenIdOffset);
  TokenSession.addSessionId(builder, sessionIdOffset);
  TokenSession.addExpiration(builder, expiration);
  TokenSession.addUserId(builder, userIdOffset);
  TokenSession.addUserLabel(builder, userLabelOffset);
  TokenSession.addPermissions(builder, permissionsOffset);
  return TokenSession.endTokenSession(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):TokenSession {
  return TokenSession.getRootAsTokenSession(new flatbuffers.ByteBuffer(buffer))
}

unpack(): TokenSessionT {
  return new TokenSessionT(
    (this.tokenId() !== null ? this.tokenId()!.unpack() : null),
    this.sessionId(),
    this.expiration(),
    this.userId(),
    this.userLabel(),
    this.bb!.createScalarList<string>(this.permissions.bind(this), this.permissionsLength())
  );
}


unpackTo(_o: TokenSessionT): void {
  _o.tokenId = (this.tokenId() !== null ? this.tokenId()!.unpack() : null);
  _o.sessionId = this.sessionId();
  _o.expiration = this.expiration();
  _o.userId = this.userId();
  _o.userLabel = this.userLabel();
  _o.permissions = this.bb!.createScalarList<string>(this.permissions.bind(this), this.permissionsLength());
}
}

export class TokenSessionT implements flatbuffers.IGeneratedObject {
constructor(
  public tokenId: TagUidT|null = null,
  public sessionId: string|Uint8Array|null = null,
  public expiration: bigint = BigInt('0'),
  public userId: string|Uint8Array|null = null,
  public userLabel: string|Uint8Array|null = null,
  public permissions: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sessionId = (this.sessionId !== null ? builder.createString(this.sessionId!) : 0);
  const userId = (this.userId !== null ? builder.createString(this.userId!) : 0);
  const userLabel = (this.userLabel !== null ? builder.createString(this.userLabel!) : 0);
  const permissions = TokenSession.createPermissionsVector(builder, builder.createObjectOffsetList(this.permissions));

  return TokenSession.createTokenSession(builder,
    (this.tokenId !== null ? this.tokenId!.pack(builder) : 0),
    sessionId,
    this.expiration,
    userId,
    userLabel,
    permissions
  );
}
}

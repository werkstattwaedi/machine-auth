// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MachineUsageHistory, MachineUsageHistoryT } from '../fbs/machine-usage-history.js';


export class UploadUsageRequest implements flatbuffers.IUnpackableObject<UploadUsageRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UploadUsageRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUploadUsageRequest(bb:flatbuffers.ByteBuffer, obj?:UploadUsageRequest):UploadUsageRequest {
  return (obj || new UploadUsageRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUploadUsageRequest(bb:flatbuffers.ByteBuffer, obj?:UploadUsageRequest):UploadUsageRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UploadUsageRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

history(obj?:MachineUsageHistory):MachineUsageHistory|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MachineUsageHistory()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startUploadUsageRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addHistory(builder:flatbuffers.Builder, historyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, historyOffset, 0);
}

static endUploadUsageRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUploadUsageRequest(builder:flatbuffers.Builder, historyOffset:flatbuffers.Offset):flatbuffers.Offset {
  UploadUsageRequest.startUploadUsageRequest(builder);
  UploadUsageRequest.addHistory(builder, historyOffset);
  return UploadUsageRequest.endUploadUsageRequest(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):UploadUsageRequest {
  return UploadUsageRequest.getRootAsUploadUsageRequest(new flatbuffers.ByteBuffer(buffer))
}

unpack(): UploadUsageRequestT {
  return new UploadUsageRequestT(
    (this.history() !== null ? this.history()!.unpack() : null)
  );
}


unpackTo(_o: UploadUsageRequestT): void {
  _o.history = (this.history() !== null ? this.history()!.unpack() : null);
}
}

export class UploadUsageRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public history: MachineUsageHistoryT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const history = (this.history !== null ? this.history!.pack(builder) : 0);

  return UploadUsageRequest.createUploadUsageRequest(builder,
    history
  );
}
}

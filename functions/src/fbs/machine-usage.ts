// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CheckOutReason, unionToCheckOutReason, unionListToCheckOutReason } from '../fbs/check-out-reason';
import { ReasonCheckInOtherMachine, ReasonCheckInOtherMachineT } from '../fbs/reason-check-in-other-machine';
import { ReasonCheckInOtherTag, ReasonCheckInOtherTagT } from '../fbs/reason-check-in-other-tag';
import { ReasonSelfCheckout, ReasonSelfCheckoutT } from '../fbs/reason-self-checkout';
import { ReasonTimeout, ReasonTimeoutT } from '../fbs/reason-timeout';
import { ReasonUi, ReasonUiT } from '../fbs/reason-ui';


export class MachineUsage implements flatbuffers.IUnpackableObject<MachineUsageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MachineUsage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMachineUsage(bb:flatbuffers.ByteBuffer, obj?:MachineUsage):MachineUsage {
  return (obj || new MachineUsage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMachineUsage(bb:flatbuffers.ByteBuffer, obj?:MachineUsage):MachineUsage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MachineUsage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sessionId():string|null
sessionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sessionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

checkIn():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

checkOut():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

reasonType():CheckOutReason {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : CheckOutReason.NONE;
}

reason<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startMachineUsage(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addSessionId(builder:flatbuffers.Builder, sessionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sessionIdOffset, 0);
}

static addCheckIn(builder:flatbuffers.Builder, checkIn:bigint) {
  builder.addFieldInt64(1, checkIn, BigInt('0'));
}

static addCheckOut(builder:flatbuffers.Builder, checkOut:bigint) {
  builder.addFieldInt64(2, checkOut, BigInt('0'));
}

static addReasonType(builder:flatbuffers.Builder, reasonType:CheckOutReason) {
  builder.addFieldInt8(3, reasonType, CheckOutReason.NONE);
}

static addReason(builder:flatbuffers.Builder, reasonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, reasonOffset, 0);
}

static endMachineUsage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMachineUsage(builder:flatbuffers.Builder, sessionIdOffset:flatbuffers.Offset, checkIn:bigint, checkOut:bigint, reasonType:CheckOutReason, reasonOffset:flatbuffers.Offset):flatbuffers.Offset {
  MachineUsage.startMachineUsage(builder);
  MachineUsage.addSessionId(builder, sessionIdOffset);
  MachineUsage.addCheckIn(builder, checkIn);
  MachineUsage.addCheckOut(builder, checkOut);
  MachineUsage.addReasonType(builder, reasonType);
  MachineUsage.addReason(builder, reasonOffset);
  return MachineUsage.endMachineUsage(builder);
}

unpack(): MachineUsageT {
  return new MachineUsageT(
    this.sessionId(),
    this.checkIn(),
    this.checkOut(),
    this.reasonType(),
    (() => {
      const temp = unionToCheckOutReason(this.reasonType(), this.reason.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: MachineUsageT): void {
  _o.sessionId = this.sessionId();
  _o.checkIn = this.checkIn();
  _o.checkOut = this.checkOut();
  _o.reasonType = this.reasonType();
  _o.reason = (() => {
      const temp = unionToCheckOutReason(this.reasonType(), this.reason.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class MachineUsageT implements flatbuffers.IGeneratedObject {
constructor(
  public sessionId: string|Uint8Array|null = null,
  public checkIn: bigint = BigInt('0'),
  public checkOut: bigint = BigInt('0'),
  public reasonType: CheckOutReason = CheckOutReason.NONE,
  public reason: ReasonCheckInOtherMachineT|ReasonCheckInOtherTagT|ReasonSelfCheckoutT|ReasonTimeoutT|ReasonUiT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sessionId = (this.sessionId !== null ? builder.createString(this.sessionId!) : 0);
  const reason = builder.createObjectOffset(this.reason);

  return MachineUsage.createMachineUsage(builder,
    sessionId,
    this.checkIn,
    this.checkOut,
    this.reasonType,
    reason
  );
}
}

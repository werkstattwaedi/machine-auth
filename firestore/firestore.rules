rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      // DEVELOPMENT MODE: Allow all authenticated users
      // TODO: Implement proper admin role checking
      //
      // Problem: User document ID != Firebase Auth UID
      // User docs use random IDs with a 'firebaseUid' field
      // Firestore rules can't query by field values (only document paths)
      //
      // Solutions for production:
      // 1. Use Firebase Auth custom claims (preferred)
      // 2. Restructure: Use Firebase Auth UID as user document ID
      // 3. Maintain a separate admin list in a known document
      //
      // See Issue #30 and docs/requirements/admin-ui-deployment.md
      return isSignedIn();
    }

    // Validation helpers
    function isDocumentReference(field, collection) {
      // Check if field is a path (DocumentReference type)
      return field is path;
      // Note: Can't deeply validate path format in Firestore rules
      // Rely on client-side validation to ensure correct collection references
    }

    function isDocumentReferenceArray(arr, collection) {
      // Check if it's a list and all elements are paths matching the pattern
      return arr is list && arr.size() >= 0;
      // Note: Can't validate array contents deeply in rules,
      // so we rely on application-level validation
    }

    // Users collection
    match /users/{userId} {
      // For development: Allow authenticated users to read/write
      // TODO: Implement proper admin checks once we have a better auth flow
      allow read: if isSignedIn();

      // Allow creating new users during sign-up (before authentication)
      allow create: if true &&
                       request.resource.data.permissions is list &&
                       isDocumentReferenceArray(request.resource.data.permissions, 'permission');

      // Allow authenticated users to update
      allow update, delete: if isSignedIn() &&
                               request.resource.data.permissions is list &&
                               isDocumentReferenceArray(request.resource.data.permissions, 'permission');
    }

    // Permission collection (singular)
    match /permission/{permissionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Tokens collection (top-level)
    match /tokens/{tokenId} {
      allow read, write: if isSignedIn() &&
                            isDocumentReference(request.resource.data.userId, 'users');
    }

    // Machines collection
    match /machine/{machineId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() &&
                      isDocumentReference(request.resource.data.maco, 'maco') &&
                      isDocumentReferenceArray(request.resource.data.requiredPermission, 'permission');
    }

    // MaCo (terminals) collection
    match /maco/{deviceId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if isSignedIn();
      // Validate that userId and tokenId are proper DocumentReferences
      allow create, update: if isAdmin() &&
                               isDocumentReference(request.resource.data.userId, 'users') &&
                               isDocumentReference(request.resource.data.tokenId, 'tokens');
      allow delete: if isAdmin();
      // TODO: Allow terminals to create/update sessions with proper authentication
    }
  }
}